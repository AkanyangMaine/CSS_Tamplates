from django.db import migrations

def load_initial_data(apps, schema_editor):
    # Get models
    DesignPrinciple = apps.get_model('principles', 'DesignPrinciple')
    CognitiveProcess = apps.get_model('principles', 'CognitiveProcess')
    InteractionType = apps.get_model('principles', 'InteractionType')
    UsabilityGoal = apps.get_model('principles', 'UsabilityGoal')

    # Design Principles (Norman's)
    DesignPrinciple.objects.create(
        name="Visibility",
        principle_type="NORMAN",
        description="The more visible functions are, the more likely users will know what to do next. The relationship between controls and their effects should be clear.",
        example="Car controls are clearly visible (indicators, headlights) and their positioning relates to their function.",
        related_cognition="Relies on human perception and attention - making important elements visually distinct helps users notice and understand them.",
        icon="eye"
    )

    DesignPrinciple.objects.create(
        name="Feedback",
        principle_type="NORMAN",
        description="Involves sending back information about what action has been done and what has been accomplished, allowing the person to continue with the activity.",
        example="When clicking a button, it should visually respond (change color) to confirm the action was received.",
        related_cognition="Supports human memory and learning by confirming actions and their results.",
        icon="chat-left-text"
    )

    DesignPrinciple.objects.create(
        name="Constraints",
        principle_type="NORMAN",
        description="Determining ways of restricting the kinds of user interaction that can take place at a given moment.",
        example="Greyed-out menu items prevent users from selecting unavailable options.",
        related_cognition="Reduces cognitive load by limiting choices to only relevant ones.",
        icon="slash-circle"
    )

    DesignPrinciple.objects.create(
        name="Consistency",
        principle_type="NORMAN",
        description="Designing interfaces to have similar operations and use similar elements for achieving similar tasks.",
        example="Using the same icon for 'save' throughout an application.",
        related_cognition="Leverages human memory by applying learned patterns across the system.",
        icon="arrow-repeat"
    )

    DesignPrinciple.objects.create(
        name="Affordance",
        principle_type="NORMAN",
        description="An attribute of an object that allows people to know how to use it. To afford means 'to give a clue'.",
        example="A mouse button invites pushing by the way it's physically constrained in its plastic shell.",
        related_cognition="Relies on human perception and prior experience with physical objects.",
        icon="hand-index-thumb"
    )

    # Nielsen's Heuristics
    DesignPrinciple.objects.create(
        name="Visibility of system status",
        principle_type="NIELSEN",
        description="The system should always keep users informed about what is going on, through appropriate feedback within reasonable time.",
        example="Progress bars during file uploads or page loading.",
        icon="info-circle"
    )

    DesignPrinciple.objects.create(
        name="Match between system and real world",
        principle_type="NIELSEN",
        description="The system should speak the users' language, with words, phrases and concepts familiar to the user.",
        example="Using a shopping cart icon for e-commerce instead of technical terms.",
        icon="globe"
    )

    # Add more Nielsen's heuristics here...

    # Cognitive Processes
    CognitiveProcess.objects.create(
        name="Attention",
        process_type="ATTENTION",
        description="The mental ability to focus on specific information while ignoring others.",
        design_implications="Crucial for noticing interface elements like alerts, buttons, or instructions. Use contrast and layout to guide user focus.",
        experiential_example="When using a mobile app, users automatically attend to visual cues (e.g., blinking notifications) while ignoring distractions like ads.",
        reflective_example="A user carefully reading error messages to understand what went wrong."
    )

    CognitiveProcess.objects.create(
        name="Perception",
        process_type="PERCEPTION",
        description="How we interpret sensory input (visual, auditory, etc.) to make sense of the world.",
        design_implications="Users rely on visual perception to recognize icons, text, and layout. Ensure interface elements are distinguishable.",
        experiential_example="Instantly recognizing a red stop sign shape even without reading the text.",
        reflective_example="Studying a complex data visualization to understand the relationships."
    )

    # Add more cognitive processes...

    # Interaction Types
    instructing = InteractionType.objects.create(
        name="Instructing",
        interaction_type="INSTRUCTING",
        description="This involves explicit commands from the user to the system. The user tells the system exactly what to do, and the system carries out the action.",
        examples="Clicking 'Print' in MS Word, typing a Linux command in terminal (mkdir, ls), selecting 'Turn in Assignment' on Moodle.",
        design_tips="Use clear buttons, icons, and feedback (e.g., a green checkmark after clicking 'Submit'). Good for experienced users who know what they want."
    )

    conversing = InteractionType.objects.create(
        name="Conversing",
        interaction_type="CONVERSING",
        description="The system engages in a dialogue with the user, like a conversation. Input/output flows like a two-way exchange.",
        examples="ChatGPT conversation, talking to Siri or Alexa, WhatsApp Business bots replying to queries.",
        design_tips="Use contextual understanding, emojis, and polite prompts to mimic real conversations. Supports error correction (e.g., rephrasing)."
    )

    # Add more interaction types...

    # Usability Goals
    effectiveness = UsabilityGoal.objects.create(
        name="Effectiveness",
        description="How good a product is at doing what it is supposed to do.",
        evaluation_question="Is the product capable of allowing people to learn, carry out their work efficiently, access the information that they need, or buy the goods that they want?",
        example="An accounting software that correctly calculates taxes."
    )

    efficiency = UsabilityGoal.objects.create(
        name="Efficiency",
        description="The way a product supports users in carrying out their tasks.",
        evaluation_question="Once users have learned how to use a product to carry out their tasks, can they sustain a high level of productivity?",
        example="Amazon's one-click purchasing that eliminates repetitive data entry."
    )

    # Add more usability goals...

    # Create relationships between models
    # For example, link interaction types to related principles
    instructing.related_principles.add(
        DesignPrinciple.objects.get(name="Visibility"),
        DesignPrinciple.objects.get(name="Feedback")
    )
    
    conversing.related_principles.add(
        DesignPrinciple.objects.get(name="Match between system and real world"),
        DesignPrinciple.objects.get(name="Feedback")
    )

def reverse_load(apps, schema_editor):
    # Empty all tables
    DesignPrinciple = apps.get_model('principles', 'DesignPrinciple')
    CognitiveProcess = apps.get_model('principles', 'CognitiveProcess')
    InteractionType = apps.get_model('principles', 'InteractionType')
    UsabilityGoal = apps.get_model('principles', 'UsabilityGoal')
    
    DesignPrinciple.objects.all().delete()
    CognitiveProcess.objects.all().delete()
    InteractionType.objects.all().delete()
    UsabilityGoal.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ('principles', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_initial_data, reverse_load),
    ]